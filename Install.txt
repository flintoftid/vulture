
Vulture Finite Difference Time-Domain Electromagnetic Solver
============================================================

Quick start for Linux
=====================

hg clone <path-to-repository> vulture-working
mkdir vulture-build-linux_$(arch)
cd vulture-build-linux_$(arch)
cmake -D CMAKE_INSTALL_PREFIX=/home/idf1/Work/Software/linux_x86_64 -D CMAKE_BUILD_TYPE=Release -D WITH_OPENMP=ON -D USE_SCALED_FIELDS=ON -D GNUPLOT_TESTS=ON -D PYTHON_TESTS=ON -D OCTAVE_TESTS=ON -D PROCESSING_TESTS=ON -D BIG_TESTS=OFF -D WITH_SIBC=ON ../vulture-working/
make
make test
make install
make package
make package_source

Building from source on Linux
=============================

Requirements: Mercurial
                optional, for obtaining source from repository
                http://mercurial.selenic.com
              CMake
                required
                version >= 2.8.3
                http://www.cmake.org 
              C compiler
                required
                with C99 support
              Octave/MATLAB
                optional, for some more advanced tests
                http://www.octave.org
              Python
                optional, for data comparison tests
                http://www.python.org

Obtain the source from a Mercurial repository

hg clone <path-to-repository>/vulture vulture-x.x.x-Source

or by unpacking a source archive

tar zxvf vulture-x.x.x-Source.tar.gz

Create and enter a build directory

mkdir vulture-build-linux_$(arch)
cd vulture-build-linux_$(arch)

Configure the build using cmake, specifying the installation prefix, build
type and any other compilation options (see below)

cmake -D CMAKE_INSTALL_PREFIX=/usr/local -D CMAKE_BUILD_TYPE=Release ../vulture-x.x.x-Source

Build the software

make

Optionally run the testsuite

make test

Install the software

make install

Developer builds and testing on Linux
=====================================

The tests can also be run directly using CTest. The 
software can be built with

ctest -D ExperimentalBuild
  
and tests run using:
  
  ctest -R testNames -D ExperimentalTest
  
The -R option takes a glob with wildcards of the names
of tests to run as its argument. Tests can be excluded with
-E testNames. 

The tests can be run under the valgrind dynamic memory analyser
using

ctest -R testNames -D ExperimentalMemCheck

For example, to run the vulture and gvulture tests with valgrind use

ctest -R ".*_.*vulture" -D ExperimentalMemCheck
  
To collect coverage information the software should be configured
with build type PROFILE

cmake -D CMAKE_BUILD_TYPE=Profile ....

and then tests should be run and coverage information collected 

ctest -R ".*_.*vulture" -D ExperimentalTest
ctest -R ".*_.*vulture" -D ExperimentalCoverage 

The results will be stored in the Testing/Temporary/ directory.
    
The test results can be submitted to a dashboard using:

ctest -R ".*_.*vulture" -D ExperimentalSubmit

This is not currently configured.
  
More verbose output can be obtained using "ctest -V".

Building from source on Windows
===============================

Requirements: Mercurial
                optional, for obtaining source from repository
                http://mercurial.selenic.com
              CMake
                required
                version >= 2.8.3
                http://www.cmake.org 
              C compiler
                with C99 support

Obtain the source from a Mercurial repository or by unpacking a 
source archive vulture-x.x.x-Source.zip using the windows file
manager. 

Create a build directory, for example, mkdir vulture-build-linux_win32.

Configure the build using the cmake gui:

  Select the source folder.
  Select the build folder created above.
  Run "Configure"
  Set in the GUI
     CMAKE_BUILD_TYPE -> Release
     CMAKE_INSTALL_PREFIX -> installation folder, e.g. C:\Program Files\Vulture
     Other options (see below)
  Run "Configure" again
  Run "Generate"
  
The rest of the compilation process depnds on which compilation suite
is been used. For the Mingw compiler:

Open a DOS terminal in the build folder.

Compile the software

mingw32-make

Run the testsuite

mingw32-make test

Install the software

ming32-make install


Compilation options
===================

The following complation options are supported:

USE_SCALED_FIELD=ON/OFF (default: OFF)

  Use scaled electric and magnetic fields. Each field component is 
  scaled by its corresponding grid edge length. This process is transparent
  to the user. It allows for slightly faster code by redcung the operation
  count in the main field update loops. This option is not compatiable with 
  USE_INDEXED_MEDIA.

USE_AVERAGED_MEDIA=ON/OFF (default: OFF)

  Average simple media parameters across material interfaces. This 
  is more accutate than the direct per voxel setting of the material
  parameters. This options is not compatiable with USE_INDEXED_MEDIA.

USE_INDEXED_MEDIA=ON/OFF (default: OFF)

  Use integer indices to hold the medium type a each field point rather 
  than real arrays of update coefficients. This can significantly reduce
  the memory requirements at the expense of a slight decrease in performance.
  The size the interger index is dset usiing the type MediumIndex and 
  macro MAX_MEDIA UINT_MAX in header file medium.h. By default this is an
  unsigned int but could be an unsigned char to minimise the memory requirement.
  This option is not compatible with USE_SCALED_FIELD or USE_AVERAGED_MEDIA.

WITH_OPENMP=ON/OFF (default: OFF)

  Use OpenMP directives to parallelise the main field update loops. The number
  of threads to use is set by the environment variable OMP_NUM_THREADS. On Linux
  this can be defined from the shell using

  export OMP_NUM_THREADS=2 (Bash/sh)

  setenv OMP_NUM_THREADS 2 (csh/tcsh)

  Under Windows it can be set from the start Menu.

WITH_SIBC=ON/OFF (default: OFF)

  Build with surface impedance boundary condition support.

